 // Borrowed from Tipun IWD1-EET


 /** APPEND_STATDESC_ENTRY
  */
DEFINE_ACTION_FUNCTION APPEND_STATDESC_ENTRY
INT_VAR
	strref   = "-1"
STR_VAR
	bam_file = "****"
RET
	index
BEGIN
	OUTER_SET index = "-1"
	OUTER_SET minus = "-1"  
	ACTION_IF ( strref >= 0 ) OR !( bam_file STRING_EQUAL ~****~ ) BEGIN
		ACTION_IF ( bam_file STRING_EQUAL ~~ ) BEGIN
			OUTER_TEXT_SPRINT bam_file ~****~
		END    
		ACTION_IF (FILE_EXISTS_IN_GAME ~statdesc.2da~) BEGIN
			COPY_EXISTING ~statdesc.2da~ ~override~
				COUNT_2DA_ROWS 3 table
				FOR ( idx = 0 ; idx < table ; ++idx ) BEGIN
					READ_2DA_ENTRY idx 0 3 number
					READ_2DA_ENTRY idx 1 3 curStrref
					READ_2DA_ENTRY idx 2 3 curBam
					PATCH_IF ( idx < number ) BEGIN
						TEXT_SPRINT line ~%idx%         %strref%         %bam_file%~
						INSERT_2DA_ROW idx 3 ~%line%~
						SET index = idx
						SET idx = table + 1
					END
					PATCH_IF ( ~%curStrref%~ = ~%minus%~ ) AND ( ~%curBam%~ STRING_EQUAL ~****~ ) AND ( index < 0 ) BEGIN
						SET_2DA_ENTRY idx 1 3 ~%strref%~
						SET_2DA_ENTRY idx 2 3 ~%bam_file%~
						SET index = number
						SET idx = table + 1
					END
				END        
					PATCH_IF ( index < 0 ) BEGIN
						TEXT_SPRINT line ~%table%         %strref%         %bam_file%~
						INSERT_2DA_ROW table 3 ~%line%~
						SET index = table
					END        
				PRETTY_PRINT_2DA
				BUT_ONLY
		END
	END
END

DEFINE_ACTION_FUNCTION ADD_SAVE_GAME
	INT_VAR
		strref    = "-1"
		num_saves = 1
		start     = "-1"
	STR_VAR
		
	RET
		index
BEGIN
	OUTER_SET index = "-1"
	COPY_EXISTING ~savename.2da~ ~override~
		PATCH_IF ( num_saves < 0 ) BEGIN SET num_saves = 1 END
		COUNT_2DA_ROWS 4 num_rows
		FOR ( i = 0 ; i < num_rows ; ++i ) BEGIN
			READ_2DA_ENTRY i 0 4 val
			PATCH_IF (!VARIABLE_IS_SET $values(~%val%~)) BEGIN
				DEFINE_ASSOCIATIVE_ARRAY values BEGIN ~%val%~ => ~~ END
			END
		END //65535
		FOR ( i = 0 ; i < 65535 ; ++i ) BEGIN
			PATCH_IF (!VARIABLE_IS_SET $values(~%i%~)) BEGIN
				PATCH_IF ( start < 0 ) BEGIN SET start = i END
				INSERT_2DA_ROW i 4 ~%i%  %strref%  %start%  %num_saves%~
				SET index = i
				SET i = 65535 + 1
			END
		END
		PRETTY_PRINT_2DA
END
//BLOCK  ATTACK_PER_ROUND
DEFINE_PATCH_FUNCTION ADD_ATTACK_PER_ROUND
	INT_VAR
		mode     = 1 //!0 - plus, 0 - minus
		attacks  = "-1" // <0 - automate read
		not_zero = 1 //!0 - not APR=0, 0 - allow APR=0
		write    = 1 // 0 - only return RES, !0 - return RES and write APR
	STR_VAR
		adds     = "1.0" //0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0
	RET
		attacks
BEGIN
	PATCH_IF ( attacks < 0 ) BEGIN SET attacks = ( BYTE_AT 0x53 ) END
	INNER_PATCH_SAVE ~adds~ ~%adds%~ BEGIN
		REPLACE_TEXTUALLY ~,~ ~.~
	END
	SET att  = attacks
	SET atts = 0
	SET no_patch = 0
	PATCH_IF ( mode     != 0 ) BEGIN SET mode     = 1 END
	PATCH_IF ( not_zero != 0 ) BEGIN SET not_zero = 1 END
	PATCH_IF ( write    != 0 ) BEGIN SET write    = 1 END
	PATCH_IF ( att > 10 ) OR  ( att < 0 )  BEGIN SET no_patch = 1 END
	PATCH_IF ( NOT no_patch ) BEGIN
		PATCH_MATCH att WITH
			0  BEGIN SET atts = 0  END
			1  BEGIN SET atts = 10 END
			2  BEGIN SET atts = 20 END
			3  BEGIN SET atts = 30 END
			4  BEGIN SET atts = 40 END
			5  BEGIN SET atts = 50 END
			6  BEGIN SET atts = 5  END
			7  BEGIN SET atts = 15 END
			8  BEGIN SET atts = 25 END
			9  BEGIN SET atts = 35 END
			10 BEGIN SET atts = 45 END
		DEFAULT
		END
		PATCH_IF ( mode ) BEGIN SET zxxx = 1 END ELSE BEGIN SET zxxx = ( 0 - 1 ) END
		PATCH_MATCH ~%adds%~ WITH
			"0.0" BEGIN SET atts = atts +  0        END
			"0.5" BEGIN SET atts = atts +  5 * zxxx END
			"1.0" BEGIN SET atts = atts + 10 * zxxx END
			"1.5" BEGIN SET atts = atts + 15 * zxxx END
			"2.0" BEGIN SET atts = atts + 20 * zxxx END
			"2.5" BEGIN SET atts = atts + 25 * zxxx END
			"3.0" BEGIN SET atts = atts + 30 * zxxx END
			"3.5" BEGIN SET atts = atts + 35 * zxxx END
			"4.0" BEGIN SET atts = atts + 40 * zxxx END
			"4.5" BEGIN SET atts = atts + 45 * zxxx END
			"5.0" BEGIN SET atts = atts + 50 * zxxx END
		DEFAULT
		END
		PATCH_IF ( atts > 50 )                 BEGIN SET atts = 50 END
		PATCH_IF ( atts <  0 )                 BEGIN SET atts =  0 END
		PATCH_IF ( not_zero ) AND ( atts = 0 ) BEGIN SET atts =  5 END
		PATCH_MATCH atts WITH
			0  BEGIN SET att =  0 END
			5  BEGIN SET att =  6 END
			10 BEGIN SET att =  1 END
			15 BEGIN SET att =  7 END
			20 BEGIN SET att =  2 END
			25 BEGIN SET att =  8 END
			30 BEGIN SET att =  3 END
			35 BEGIN SET att =  9 END
			40 BEGIN SET att =  4 END
			45 BEGIN SET att = 10 END
			50 BEGIN SET att =  5 END
		DEFAULT
		END
	END
	SET attacks = att
	PATCH_IF ( write ) BEGIN
		WRITE_BYTE 0x53 attacks
	END
END
//BLOCKEND
//BLOCK EDIT_STORE_PURCHASE
DEFINE_PATCH_FUNCTION EDIT_STORE_PURCHASE
	INT_VAR
		type   = "-1"
		delete =   0
BEGIN
	SET add =   0
	SET ix  = "-1"
	SET off =   0
	PATCH_IF ( delete != 0 ) BEGIN SET delete = 1 SET ix = 1 END
	PATCH_IF ( type   >= 0 ) BEGIN
		READ_LONG 0x2c purch_off
		READ_LONG 0x30 purch_num
		SET add = 1
		PATCH_IF ( purch_num > 0 ) BEGIN
			FOR ( i = 0 ; i < purch_num ; ++i ) BEGIN
				READ_LONG purch_off + i * 4 tp
				PATCH_IF ( tp = type ) BEGIN
					SET i = purch_num
					PATCH_IF ( delete ) BEGIN
						SET off = i * 4
					END ELSE BEGIN
						SET add = 0
					END
				END
			END
		END
	END
	PATCH_IF ( add ) BEGIN
		READ_LONG    0x34 items_off
		READ_LONG    0x4c drink_off
		READ_LONG    0x70 cures_off
		PATCH_IF ( delete ) BEGIN
			DELETE_BYTES purch_off + off           4
			PATCH_IF ( items_off >  purch_off ) BEGIN WRITE_LONG 0x34 ( items_off - 4 ) END
			PATCH_IF ( drink_off >  purch_off ) BEGIN WRITE_LONG 0x34 ( drink_off - 4 ) END
			PATCH_IF ( cures_off >  purch_off ) BEGIN WRITE_LONG 0x34 ( cures_off - 4 ) END
		END ELSE BEGIN
			INSERT_BYTES purch_off + purch_num * 4 4
			WRITE_LONG   purch_off + purch_num * 4 type
			PATCH_IF ( items_off >= purch_off ) BEGIN WRITE_LONG 0x34 ( items_off + 4 ) END
			PATCH_IF ( drink_off >= purch_off ) BEGIN WRITE_LONG 0x34 ( drink_off + 4 ) END
			PATCH_IF ( cures_off >= purch_off ) BEGIN WRITE_LONG 0x34 ( cures_off + 4 ) END
		END
		WRITE_LONG   0x30 ( purch_num + ( 1 * ix ) )
	END
END
//BLOCKEND

//BLOCK REPLACE_MULTILINE
//Patch function that replaces set or all occurrences of the given regexp pattern in the file with the given string.
//Use EVAL to perform variable substitution on the string and/or the regexp pattern.
//Unlike REPLACE_TEXTUALLY the pattern can be multi-line text, even without using regexp.
//Just like REPLACE_BCS_BLOCK the function ignores pattern whitespace.
//The function can be also used as a COUNT_REGEXP_INSTANCES alternative with the above mentioned features.
//Optional PATCH_WARN message is printed if the task could not be performed (pattern not found or different amount of pattern matches than expected).

DEFINE_PATCH_FUNCTION REPLACE_MULTILINE
	INT_VAR
		num = "-1"     //amount of times the pattern should be replaced with string (-1 by default which is at least 1 but without max limit)
		strict = 0     //set to 1 to enable strict checking (auto escapes $^.*+?[]\ special characters)
		verbose = 1    //set to 0 to skip printing patching message
		warn = 1       //set to 0 to skip printing warning message if the function can't do what you ask it to do
		only_count = 0 //set to to 1 to skip pattern replacing and just return num_matches (COUNT_REGEXP_INSTANCES alternative)
	STR_VAR
		pattern = ""   //pattern that you want to replace
		string = ""    //string that the pattern will be replaced with
	RET
		num_matches    //amount of times the pattern has been found
	BEGIN
	TEXT_SPRINT percent ~%~
	INNER_PATCH_SAVE textToReplace ~%pattern%~ BEGIN
		PATCH_IF strict = 1 BEGIN
			REPLACE_TEXTUALLY ~\\~ ~\\\\~
			REPLACE_TEXTUALLY ~\[~ ~\[~
			REPLACE_TEXTUALLY ~\]~ ~\]~
			REPLACE_EVALUATE ~\([\$\^\.\*\+\?]\)~ BEGIN END ~\%MATCH1%~
		END
		REPLACE_TEXTUALLY ~[%WNL%%LNL%%MNL%%TAB% ]+~ ~[%WNL%%LNL%%MNL%%TAB% ]+~
	END
	SET num_matches = 0
	PATCH_IF only_count = 0 BEGIN
		REPLACE_EVALUATE CASE_INSENSITIVE ~%textToReplace%~ BEGIN
			SET num_matches = num_matches + 1
			INNER_PATCH_SAVE string ~%string%~ BEGIN
				REPLACE_TEXTUALLY ~%percent%MATCH\([0-9]+\)%percent%~ ~%MATCH\1%~
			END
		END ~%string%~
		SET warned = 0
		PATCH_IF num_matches != num BEGIN
			PATCH_IF num_matches = 0 BEGIN
				PATCH_IF warn = 1 BEGIN
					PATCH_WARN ~WARNING %SOURCE_FILESPEC% - pattern not found:%LNL%%pattern%~
				END
				SET warned = 1
			END ELSE PATCH_IF num >= 0 AND (num_matches > num OR num_matches < num) BEGIN
				PATCH_IF warn = 1 BEGIN
					PATCH_WARN ~WARNING %SOURCE_FILESPEC% - pattern replaced %num_matches% time(s) instead of %num%:%LNL%%pattern%~
				END
				SET warned = 1
			END
		END
		PATCH_IF verbose = 1 AND warned = 0 BEGIN
			PATCH_PRINT ~Patching %SOURCE_FILESPEC% - pattern replaced %num_matches% time(s):%LNL%%pattern% => %string%~
		END
	END ELSE BEGIN
		COUNT_REGEXP_INSTANCES ~%textToReplace%~ num_matches
	END
END
//BLOCKEND

DEFINE_PATCH_FUNCTION GET_BIT
INT_VAR
	number = 0
	nth_bit = 0
RET
	bit_value
BEGIN
	SET bit_value = (number >> nth_bit) & 1
END

//BLOCK ALTER_AREA_ACTOR_EX
DEFINE_PATCH_FUNCTION MATCH_ALTER_ACTOR
	INT_VAR
		match_pos_x = "-1"
		match_pos_y = "-1"
		match_dest_x = "-1"
		match_dest_y = "-1"
		match_bit_unattached = "-1"
		match_bit_has_seen = "-1"
		match_bit_invulnerable = "-1"
		match_bit_override_script = "-1"
		match_spawned = "-1"
		match_animation = "-1"
		match_orientation = "-1"
		match_expiry = "-2"
		match_wander = "-1"
		match_follow = "-1"
		match_talked_to = "-1"
		
		pos_x = "-1"
		pos_y = "-1"
		dest_x = "-1"
		dest_y = "-1"
		bit_unattached = 1
		bit_has_seen = 0
		bit_invulnerable = 0
		bit_override_script = 0
		spawned = "-1"
		animation = "-1"
		orientation = "-1"
		expiry = "-2"
		wander = "-1"
		follow = "-1"
		talked_to = "-1"
	STR_VAR
		match_name = "same"
		match_dialogue = "same"
		match_override_script = "same"
		match_general_script = "same"
		match_class_script = "same"
		match_race_script = "same"
		match_default_script = "same"
		match_specifics_script = "same"
		match_cre_file = "same"
		
		name = "same"
		dialogue = "same"
		override_script = "same"
		general_script = "same"
		class_script = "same"
		race_script = "same"
		default_script = "same"
		specifics_script = "same"
		cre_file = "same"
	RET
		file_txt
BEGIN
	SET minus_one = ( 0 - 1 )
	SET minus_two = ( 0 - 2 )
	SPRINT file_txt ~~
	READ_LONG  0x54 act_off
	READ_SHORT 0x58 act_num
	PATCH_IF ( act_num > 0 ) BEGIN
		FOR ( i = 0 ; i < act_num ; ++i ) BEGIN
			SET match = 0
			SET offset = act_off + i * 0x110
			READ_ASCII offset + 0x00 data ( 32 ) NULL
			PATCH_IF ( match >= 0 ) AND ( ~%match_name%~ STR_CMP ~same~ ) BEGIN
				PATCH_IF ( ~%match_name%~ STR_EQ ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
			END
			READ_SHORT offset + 0x20 data
			PATCH_IF ( match >= 0 ) AND ( ~%match_pos_x%~ != minus_one ) BEGIN
				PATCH_IF ( ~%match_pos_x%~ = ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
			END
			READ_SHORT offset + 0x22 data
			PATCH_IF ( match >= 0 ) AND ( ~%match_pos_y%~ != minus_one ) BEGIN
				PATCH_IF ( ~%match_pos_y%~ = ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
			END
			READ_SHORT offset + 0x24 data
			PATCH_IF ( match >= 0 ) AND ( ~%match_dest_x%~ != minus_one ) BEGIN
				PATCH_IF ( ~%match_dest_x%~ = ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
			END
			READ_SHORT offset + 0x26 data
			PATCH_IF ( match >= 0 ) AND ( ~%match_dest_y%~ != minus_one ) BEGIN
				PATCH_IF ( ~%match_dest_y%~ = ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
			END
			READ_BYTE  offset + 0x28 flags
				LPF GET_BIT INT_VAR nth_bit = 0 number = flags RET data = bit_value END
				PATCH_IF ( match >= 0 ) AND ( ~%match_bit_unattached%~ != minus_one ) BEGIN
					PATCH_IF ( ~%match_bit_unattached%~ = ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
				END
				LPF GET_BIT INT_VAR nth_bit = 1 number = flags RET data = bit_value END
				PATCH_IF ( match >= 0 ) AND ( ~%match_bit_has_seen%~ != minus_one ) BEGIN
					PATCH_IF ( ~%match_bit_has_seen%~ = ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
				END
				LPF GET_BIT INT_VAR nth_bit = 2 number = flags RET data = bit_value END
				PATCH_IF ( match >= 0 ) AND ( ~%match_bit_invulnerable%~ != minus_one ) BEGIN
					PATCH_IF ( ~%match_bit_invulnerable%~ = ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
				END
				LPF GET_BIT INT_VAR nth_bit = 3 number = flags RET data = bit_value END
				PATCH_IF ( match >= 0 ) AND ( ~%match_bit_override_script%~ != minus_one ) BEGIN
					PATCH_IF ( ~%match_bit_override_script%~ = ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
				END
			READ_SHORT offset + 0x2c data
			PATCH_IF ( match >= 0 ) AND ( ~%match_spawned%~ != minus_one ) BEGIN
				PATCH_IF ( ~%match_spawned%~ = ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
			END
			READ_LONG  offset + 0x30 data
			PATCH_IF ( match >= 0 ) AND ( ~%match_animation%~ != minus_one ) BEGIN
				PATCH_IF ( ~%match_animation%~ = ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
			END
			READ_SHORT offset + 0x34 data
			PATCH_IF ( match >= 0 ) AND ( ~%match_orientation%~ != minus_one ) BEGIN
				PATCH_IF ( ~%match_orientation%~ = ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
			END
			READ_LONG  offset + 0x38 data
			PATCH_IF ( match >= 0 ) AND ( ~%match_expiry%~ != minus_two ) BEGIN
				PATCH_IF ( ~%match_expiry%~ = ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
			END
			READ_SHORT offset + 0x3c data
			PATCH_IF ( match >= 0 ) AND ( ~%match_wander%~ != minus_one ) BEGIN
				PATCH_IF ( ~%match_wander%~ = ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
			END
			READ_SHORT offset + 0x3e data
			PATCH_IF ( match >= 0 ) AND ( ~%match_follow%~ != minus_one ) BEGIN
				PATCH_IF ( ~%match_follow%~ = ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
			END
			READ_LONG  offset + 0x44 data
			PATCH_IF ( match >= 0 ) AND ( ~%match_talked_to%~ != minus_one ) BEGIN
				PATCH_IF ( ~%match_talked_to%~ = ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
			END
			READ_ASCII offset + 0x48 data ( 8 ) NULL
			PATCH_IF ( match >= 0 ) AND ( ~%match_dialogue%~ STR_CMP ~same~ ) BEGIN
				PATCH_IF ( ~%match_dialogue%~ STR_EQ ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
			END
			READ_ASCII offset + 0x50 data ( 8 ) NULL
			PATCH_IF ( match >= 0 ) AND ( ~%match_override_script%~ STR_CMP ~same~ ) BEGIN
				PATCH_IF ( ~%match_override_script%~ STR_EQ ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
			END
			READ_ASCII offset + 0x58 data ( 8 ) NULL
			PATCH_IF ( match >= 0 ) AND ( ~%match_general_script%~ STR_CMP ~same~ ) BEGIN
				PATCH_IF ( ~%match_general_script%~ STR_EQ ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
			END
			READ_ASCII offset + 0x60 data ( 8 ) NULL
			PATCH_IF ( match >= 0 ) AND ( ~%match_class_script%~ STR_CMP ~same~ ) BEGIN
				PATCH_IF ( ~%match_class_script%~ STR_EQ ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
			END
			READ_ASCII offset + 0x68 data ( 8 ) NULL
			PATCH_IF ( match >= 0 ) AND ( ~%match_race_script%~ STR_CMP ~same~ ) BEGIN
				PATCH_IF ( ~%match_race_script%~ STR_EQ ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
			END
			READ_ASCII offset + 0x70 data ( 8 ) NULL
			PATCH_IF ( match >= 0 ) AND ( ~%match_default_script%~ STR_CMP ~same~ ) BEGIN
				PATCH_IF ( ~%match_default_script%~ STR_EQ ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
			END
			READ_ASCII offset + 0x78 data ( 8 ) NULL
			PATCH_IF ( match >= 0 ) AND ( ~%match_specifics_script%~ STR_CMP ~same~ ) BEGIN
				PATCH_IF ( ~%match_specifics_script%~ STR_EQ ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
			END
			READ_ASCII offset + 0x80 data ( 8 ) NULL
			PATCH_IF ( match >= 0 ) AND ( ~%match_cre_file%~ STR_CMP ~same~ ) BEGIN
				PATCH_IF ( ~%match_cre_file%~ STR_EQ ~%data%~ ) BEGIN SET match = 1 END ELSE BEGIN SET match = minus_one END
			END
			PATCH_IF ( match = 1 ) BEGIN
				SET idx = i + 1
				SPRINT file_txt ~%file_txt%%idx%  %offset%  zzz%LNL%~
			END
		END
	END	
END
//BLOCK 
DEFINE_PATCH_FUNCTION ALTER_AREA_ACTOR_EX //0x110
	INT_VAR
		numbers = 2 //0 - first, 1 - last, 2 - all, 3 - position (start =  0)
		position = 10
		
		match_pos_x = "-1"
		match_pos_y = "-1"
		match_dest_x = "-1"
		match_dest_y = "-1"
		match_bit_unattached = "-1"
		match_bit_has_seen = "-1"
		match_bit_invulnerable = "-1"
		match_bit_override_script = "-1"
		match_spawned = "-1"
		match_animation = "-1"
		match_orientation = "-1"
		match_expiry = "-2"
		match_wander = "-1"
		match_follow = "-1"
		match_talked_to = "-1"
		
		pos_x = "-1"
		pos_y = "-1"
		dest_x = "-1"
		dest_y = "-1"
		bit_unattached = 1
		bit_has_seen = 0
		bit_invulnerable = 0
		bit_override_script = 0
		spawned = "-1"
		animation = "-1"
		orientation = "-1"
		expiry = "-2"
		wander = "-1"
		follow = "-1"
		talked_to = "-1"
	STR_VAR
		match_name = "same"
		match_dialogue = "same"
		match_override_script = "same"
		match_general_script = "same"
		match_class_script = "same"
		match_race_script = "same"
		match_default_script = "same"
		match_specifics_script = "same"
		match_cre_file = "same"
		
		name = "same"
		dialogue = "same"
		override_script = "same"
		general_script = "same"
		class_script = "same"
		race_script = "same"
		default_script = "same"
		specifics_script = "same"
		cre_file = "same"
BEGIN
	PATCH_IF ( numbers < 0 ) OR ( numbers > 3 ) BEGIN SET numbers = 2 END
	PATCH_IF ( numbers != 3 ) BEGIN SET position = ( 0 - 1 ) END
	LPF MATCH_ALTER_ACTOR
		INT_VAR match_pos_x match_pos_y match_dest_x match_dest_y match_bit_unattached match_bit_has_seen match_bit_invulnerable match_bit_override_script match_spawned match_animation match_orientation match_expiry match_wander match_follow match_talked_to pos_x pos_y dest_x dest_y bit_unattached bit_has_seen bit_invulnerable bit_override_script spawned animation orientation expiry wander follow talked_to
		STR_VAR match_name match_dialogue match_override_script match_general_script match_class_script match_race_script match_default_script match_specifics_script match_cre_file name dialogue override_script general_script class_script race_script default_script specifics_script cre_file
		RET file_txt
	END
	CLEAR_ARRAY num_items_array
	INNER_ACTION BEGIN
		OUTER_INNER_PATCH_SAVE ~file_txt~ ~%file_txt%~ BEGIN
			COUNT_2DA_ROWS 3 num_items
			FOR ( i = 0 ; i < num_items ; ++i ) BEGIN
				READ_2DA_ENTRY i 0 3 numx
				READ_2DA_ENTRY i 1 3 offset
				SET EVAL ~num_items_array_%i%~ = ~%offset%~
			END
		END
	END
	SET minus_one = ( 0 - 1 )
	SET minus_two = ( 0 - 2 )
	PATCH_IF ( num_items > 0 ) BEGIN
		PATCH_MATCH numbers WITH
			0 BEGIN
				SET num_items = 1
			END
			1 BEGIN
				SET idx = num_items - 1
				SET num_items = 1
				SET num_items_array_0 = EVAL ~num_items_array_%idx%~
			END
			2 BEGIN
			END
			3 BEGIN
				PATCH_IF ( position > num_items ) BEGIN SET position = num_items - 1 END
				SET num_items = 1
				SET num_items_array_0 = EVAL ~num_items_array_%position%~
			END
			DEFAULT
		END
		FOR ( i = 0 ; i < num_items ; ++i ) BEGIN
			SET offset = EVAL ~num_items_array_%i%~
			PATCH_IF ( ~%name%~             STR_CMP ~same~ ) BEGIN WRITE_EVALUATED_ASCII offset + 0x00 ~%name%~ (32)            END
			PATCH_IF ( pos_x != minus_one )                  BEGIN WRITE_SHORT           offset + 0x20 pos_x                    END
			PATCH_IF ( pos_y != minus_one )                  BEGIN WRITE_SHORT           offset + 0x22 pos_y                    END
			PATCH_IF ( dest_x != minus_one )                 BEGIN WRITE_SHORT           offset + 0x24 dest_x                   END
			PATCH_IF ( dest_y != minus_one )                 BEGIN WRITE_SHORT           offset + 0x26 dest_y                   END
			READ_BYTE 0x28 flags
			//BLOCK 
			SET set_flags = flags
			PATCH_IF ( bit_unattached != minus_one ) BEGIN
				LPF GET_BIT INT_VAR nth_bit = 0 number = flags RET bit_value END
				PATCH_IF ( bit_value ) BEGIN
					PATCH_IF ( bit_unattached = 0 ) BEGIN SET set_flags = set_flags - 1       END
				END ELSE BEGIN
					PATCH_IF ( bit_unattached != 0 ) BEGIN SET set_flags = set_flags + 1      END
				END
			END
			PATCH_IF ( bit_has_seen != minus_one ) BEGIN
				LPF GET_BIT INT_VAR nth_bit = 1 number = flags RET bit_value END
				PATCH_IF ( bit_value ) BEGIN
					PATCH_IF ( bit_has_seen = 0 ) BEGIN SET set_flags = set_flags - 2         END
				END ELSE BEGIN
					PATCH_IF ( bit_has_seen != 0 ) BEGIN SET set_flags = set_flags + 2        END
				END
			END
			PATCH_IF ( bit_invulnerable != minus_one ) BEGIN
				LPF GET_BIT INT_VAR nth_bit = 2 number = flags RET bit_value END
				PATCH_IF ( bit_value ) BEGIN
					PATCH_IF ( bit_invulnerable = 0 ) BEGIN SET set_flags = set_flags - 4     END
				END ELSE BEGIN
					PATCH_IF ( bit_invulnerable != 0 ) BEGIN SET set_flags = set_flags + 4    END
				END
			END
			PATCH_IF ( bit_override_script != minus_one ) BEGIN
				LPF GET_BIT INT_VAR nth_bit = 3 number = flags RET bit_value END
				PATCH_IF ( bit_value ) BEGIN
					PATCH_IF ( bit_override_script = 0 ) BEGIN SET set_flags = set_flags - 8  END
				END ELSE BEGIN
					PATCH_IF ( bit_override_script != 0 ) BEGIN SET set_flags = set_flags + 8 END
				END
			END
			//BLOCKEND
			WRITE_BYTE 0x28 set_flags
			PATCH_IF ( spawned != minus_one )                BEGIN WRITE_SHORT           offset + 0x2c spawned                  END
			PATCH_IF ( animation != minus_one )              BEGIN WRITE_LONG            offset + 0x30 animation                END
			PATCH_IF ( orientation != minus_one )            BEGIN WRITE_SHORT           offset + 0x34 orientation              END
			PATCH_IF ( expiry != minus_two )                 BEGIN WRITE_LONG            offset + 0x38 expiry                   END
			PATCH_IF ( wander != minus_one )                 BEGIN WRITE_SHORT           offset + 0x3c wander                   END
			PATCH_IF ( follow != minus_one )                 BEGIN WRITE_SHORT           offset + 0x3e follow                   END
			PATCH_IF ( talked_to != minus_one )              BEGIN WRITE_LONG            offset + 0x44 talked_to                END
			PATCH_IF ( ~%dialogue%~         STR_CMP ~same~ ) BEGIN WRITE_EVALUATED_ASCII offset + 0x48 ~%dialogue%~ (8)         END
			PATCH_IF ( ~%override_script%~  STR_CMP ~same~ ) BEGIN WRITE_EVALUATED_ASCII offset + 0x50 ~%override_script%~ (8)  END
			PATCH_IF ( ~%general_script%~   STR_CMP ~same~ ) BEGIN WRITE_EVALUATED_ASCII offset + 0x58 ~%general_script%~ (8)   END
			PATCH_IF ( ~%class_script%~     STR_CMP ~same~ ) BEGIN WRITE_EVALUATED_ASCII offset + 0x60 ~%class_script%~ (8)     END
			PATCH_IF ( ~%race_script%~      STR_CMP ~same~ ) BEGIN WRITE_EVALUATED_ASCII offset + 0x68 ~%race_script%~ (8)      END
			PATCH_IF ( ~%default_script%~   STR_CMP ~same~ ) BEGIN WRITE_EVALUATED_ASCII offset + 0x70 ~%default_script%~ (8)   END
			PATCH_IF ( ~%specifics_script%~ STR_CMP ~same~ ) BEGIN WRITE_EVALUATED_ASCII offset + 0x78 ~%specifics_script%~ (8) END
			PATCH_IF ( ~%cre_file%~         STR_CMP ~same~ ) BEGIN WRITE_EVALUATED_ASCII offset + 0x80 ~%cre_file%~ (8)         END
		END
	END
END
//BLOCKEND
//BLOCKEND
